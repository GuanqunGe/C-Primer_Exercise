#include <iostream>
#include <string>
#include <vector>
#include <memory>

class Quote{
public:
    Quote()=default;
    Quote(const std::string &s, double p): bookNo(s), price(p){}

    virtual ~Quote() = default;

    std::string isbn() const {return bookNo; }
    virtual double net_price(std::size_t n) const { return n * price; }

    virtual std::ostream &debug(std::ostream &os) const{
	os << "ISBN: " << bookNo << " price: " << price;
	return os;
    }

protected:
    double price = 0.0;
private:
    std::string bookNo;
};

class Disc_quote : public Quote{
public:
    Disc_quote() = default;
    Disc_quote(const std::string &s, double p, std::size_t q, double d):
	Quote(s, p), quantity(q), discount(d){}

    double net_price(std::size_t n) const = 0; //pure virtual function
    std::ostream &debug(std::ostream &os) const override{
	this->Quote::debug(os) << " quantity: " << quantity << " discount: " << discount;
        return os;
    }
protected:
    std::size_t quantity = 0;
    double discount = 0.0;
};

class Bulk_quote : public Disc_quote{
public:
    Bulk_quote() = default;
    Bulk_quote(const std::string &s, double p, std::size_t q, double d):
	Disc_quote(s, p, q, d){}

    double net_price(std::size_t n) const override;
};

double Bulk_quote::net_price(std::size_t n) const{
    if( n >= quantity) 
	return n * price * (1 - discount);
    else
	return n * price;
}

class Promotion : public Disc_quote{
public:
    Promotion() = default;
    Promotion(const std::string &s, double p, std::size_t q, double d):
	Disc_quote(s, p, q, d){}
 
    double net_price(std::size_t n) const override{
	if( n <= quantity)
	    return n * price * (1 - discount);
        else
	    return quantity * price * (1 - discount) + ( n - quantity) * price;
    }
};

std::ostream &print_total(std::ostream &os, const Quote &item, std::size_t n){
    double price = item.net_price(n);
    os << item.isbn() << " " << price;
    return os;
}

int main(){

   //ex_15_28
   std::vector<Quote> items;
   //items.emplace_back("AAAA", 50, 10, 0.2); //can't use emplace back to initialize Bulk_quote, as arguments don't match with Quote constructor
   items.push_back(Bulk_quote("AAAA", 50, 10, 0.2));
   items.push_back(Bulk_quote("BBBB", 60, 5, 0.25));
   
   for(const auto & sale : items){
       std::cout << sale.isbn() << " " << sale.net_price(10) << std::endl;
   }


   //ex_15_29
   std::vector<std::shared_ptr<Quote>> vec;
   vec.push_back(std::make_shared<Bulk_quote>("AAAA", 50, 10, 0.2));
   vec.push_back(std::make_shared<Bulk_quote>("BBBB", 60, 5, 0.25));
   vec.push_back(std::make_shared<Promotion>("CCCC", 100, 2, 0.5));

   for(auto salep : vec){
	print_total(std::cout, *salep, 10) << std::endl;
   }
   //discrepancy in the net_price() generated by ex_15_29 version and ex_15_28 version is that:
   // ex_15_28 version uses Quote's version of  net_price()
   // ex_15_29 version uses the version of the dynamic type of the shared_ptr vec stores
   return 0;
}
